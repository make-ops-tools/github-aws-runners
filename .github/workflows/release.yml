name: Release build

on:
  push:
    branches:
      - main
      - v1
  workflow_dispatch:

jobs:
  prepare:
    name: Create dist
    runs-on: ubuntu-latest
    container: node:18
    strategy:
      matrix:
        lambda: ["modules/webhook/lambdas/webhook", "modules/runner-binaries-syncer/lambdas/runner-binaries-syncer", "modules/runners/lambdas/runners"]
    permissions:
      contents: read
      actions: write
    steps:
      - name: Extract lambda name
        id: lambda
        env:
          LAMBDA: ${{ matrix.lambda }}
        run: echo "name=${LAMBDA##*/}" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
      - name: Add zip
        run: apt update && apt install zip
      - name: Build dist
        working-directory: ${{ matrix.lambda }}
        run: yarn install && yarn run test && yarn dist
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.lambda.outputs.name }}
          path: ${{ matrix.lambda }}/${{ steps.lambda.outputs.name }}.zip
          retention-days: 1

  release:
    name: release
    runs-on: ubuntu-latest
    needs:
      prepare
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Get installation token
        uses: philips-software/app-token-action@v1.1.2
        id: token
        with:
          app_id: ${{ secrets.FOREST_RELEASER_APP_ID }}
          app_base64_private_key: ${{ secrets.FOREST_RELEASER_APP_PRIVATE_KEY_BASE64 }}
          auth_type: installation


      - name: Extract branch name
        id: branch
        shell: bash
        run: echo "name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Release
        id: release
        uses: google-github-actions/release-please-action@e0b9d1885d92e9a93d5ce8656de60e3b806e542c # ratchet:google-github-actions/release-please-action@v3
        with:
          default-branch: ${{ steps.branch.outputs.name }}
          release-type: terraform-module
          token: ${{ steps.token.outputs.token }}

  assets:
    name: upload assets
    if: ${{ needs.release.outputs.releases_created }}
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        asset: ["webhook", "runner-binaries-syncer", "runners"]
    permissions:
      contents: write
      actions: read

    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.asset }}

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run:
          gh release upload ${{ needs.release.outputs.tag_name }} ${{ matrix.asset }}.zip
